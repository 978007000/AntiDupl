using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using AntiDuplWPF.Command;
using AntiDuplWPF.Model;
using AntiDuplWPF.ObjectModel;
using AntiDuplWPF.ObjectModel.ByImageProperty;
using AntiDuplWPF.ObjectModel.ConditionMode;
using AntiDuplWPF.ObjectModel.ConfigurableAction;
using AntiDuplWPF.ObjectModel.DirectoryFilter;
using AntiDuplWPF.ObjectModel.GettingNumber;
using AntiDuplWPF.UndoRedo;
using AntiDuplWPF.View;

namespace AntiDuplWPF.ViewModel
{
    class ConfigurableActionViewModel : CloseableViewModel
    {
        private System.Collections.ObjectModel.ObservableCollection<DuplPairViewModel> _resultList;
        IUndoRedoEngine _undoRedoEngine;
        IEditableCollectionView _resultCollectionView;
        IWindowService _windowService;

        public System.Collections.ObjectModel.ObservableCollection<ConfigurableActionGenerator> Actions { get; private set; }

        ConfigurableActionGenerator _configurableAction;
        public ConfigurableActionGenerator ConfigurableAction
        {
            get { return _configurableAction; }
            set
            {
                _configurableAction = value;
                RaisePropertyChangedEvent("ConfigurableAction");
            }
        }

        public ConfigurableActionViewModel(ObservableCollection<DuplPairViewModel> resultList,
             IConfigurationModel configuration, IUndoRedoEngine undoRedoEngine, 
            IEditableCollectionView resultCollectionView,
            IWindowService windowService)
        {
            this._resultList = resultList;
            Configuration = configuration;
            _undoRedoEngine = undoRedoEngine;
            _resultCollectionView = resultCollectionView;
            _windowService = windowService;

            AlgorithmsOfGettingNumberFromFileName = new ObservableCollection<IGettingNumber>();
            AlgorithmsOfGettingNumberFromFileName.Add(new NumberBeforeUnderlineGettingNumber());

            BestSelectingByImagePropertyesList = new ObservableCollection<IBestSelectingByImagePropertyes>();
            BestSelectingByImagePropertyesList.Add(new BigFileSize());
            BestSelectingByImagePropertyesList.Add(new FileSizeResolutionBluringPeak());


            AllIConditionMode = new ObservableCollection<IConditionMode>();
            AllIConditionMode.Add(new EqualConditionMode());
            AllIConditionMode.Add(new LessConditionMode());
            AllIConditionMode.Add(new MoreConditionMode());

            AllDirectoryFilters = new ObservableCollection<IDirectoryFilter>();
            AllDirectoryFilters.Add(new AnywhereDirectoryFilter());
            AllDirectoryFilters.Add(new SameDirectory());
            AllDirectoryFilters.Add(new OneImageInDir1OtherInDir2());

            ConfigurableActionGenerator testAction = new ConfigurableActionGenerator() { Name = "Test" };

            testAction.SelectConditions = new ObservableCollection<SelectCondition>();

            testAction.AlgorithmOfGettingNumberFromFileName = AlgorithmsOfGettingNumberFromFileName.Single(a => a is NumberBeforeUnderlineGettingNumber);

            testAction.SelectConditions.Add(new SelectCondition() 
            { 
                Parametr = ConditionParametr.Difference,
                Mode = new LessConditionMode(),
                ValueDouble = 0.05 
            });
            testAction.SelectConditions.Add(new SelectCondition() 
            {
                Parametr = ConditionParametr.BlockinessDifference,
                Mode = new LessConditionMode(), 
                ValueDouble = 0.50 
            });
            testAction.SelectConditions.Add(new SelectCondition()
            {
                Parametr = ConditionParametr.BlurringDifference,
                Mode = new LessConditionMode(),
                ValueDouble = 0.50
            });
            testAction.SelectConditions.Add(new SelectCondition()
            {
                Parametr = ConditionParametr.ResolutionDifference,
                Mode = new EqualConditionMode(),
                ValueUint = 0
            });
            testAction.SelectConditions.Add(new SelectCondition()
            {
                Parametr = ConditionParametr.NoTransformType,
               //Mode = new EqualConditionMode(),
               // TransformType = Core.CoreDll.TransformType.Turn_0
            });
            //SelectConditions.Add(new SelectCondition()
            //{
            //    Parametr = ConditionParametr.SameDirectory,
            //});
            testAction.SelectConditions.Add(new SelectCondition()
            {
                Parametr = ConditionParametr.SameType,
            });
            testAction.SelectConditions.Add(new SelectCondition()
            {
                Parametr = ConditionParametr.DctHistogramPeaksDifference,
                Mode = new EqualConditionMode(),
                ValueUint = 0
            });
            testAction.BestSelectingByImagePropertyes = BestSelectingByImagePropertyes.BigFileSize;
            //ActionCondition = ObjectModel.ActionCondition.BestImageByPropertyEqualBestImageByPath;
            testAction.ActionOnDuplPair = ObjectModel.ActionOnDuplPair.DeleteBadImage;
            testAction.ElseActionOnDuplPair = ObjectModel.ActionOnDuplPair.ReplaceBadImage;
            
            testAction.DirectoryFilter = AllDirectoryFilters.Single(df => df is SameDirectory);

            Actions = new ObservableCollection<ConfigurableActionGenerator>();
            Actions.Add(testAction);
            ConfigurableAction = Actions.FirstOrDefault();
        }

        public IConfigurationModel Configuration { get; private set; }

        ObservableCollection<IConditionMode> _allIConditionMode;
        public ObservableCollection<IConditionMode> AllIConditionMode
        {
            get { return _allIConditionMode; }
            set
            {
                _allIConditionMode = value;
                RaisePropertyChangedEvent("AllIConditionMode");
            }
        }

        ObservableCollection<IGettingNumber> _algorithmsOfGettingNumberFromFileName;
        public ObservableCollection<IGettingNumber> AlgorithmsOfGettingNumberFromFileName
        {
            get { return _algorithmsOfGettingNumberFromFileName; }
            set
            {
                _algorithmsOfGettingNumberFromFileName = value;
                RaisePropertyChangedEvent("AlgorithmsOfGettingNumberFromFileName");
            }
        }


       




        //ActionCondition _actionCondition;
        //public ActionCondition ActionCondition
        //{
        //    get { return _actionCondition; }
        //    set
        //    {
        //        _actionCondition = value;
        //        RaisePropertyChangedEvent("ActionCondition");
        //    }
        //}

       


        ObservableCollection<IDirectoryFilter> _allDirectoryFilters;
        public ObservableCollection<IDirectoryFilter> AllDirectoryFilters
        {
            get { return _allDirectoryFilters; }
            set
            {
                _allDirectoryFilters = value;
                RaisePropertyChangedEvent("AllDirectoryFilters");
            }
        }


        ICommand _showPreviewCommand;
        public ICommand ShowPreviewCommand
        {
            get
            {
                return _showPreviewCommand ?? (_showPreviewCommand = new RelayCommand(arg =>
                {
                    IEnumerable<DuplPairViewModel> filtered = _resultList;

                    Debug.WriteLine(String.Format("resultList = {0}", _resultList.Count));
                    filtered = _resultList.Where(result => ConfigurableAction.AlgorithmOfGettingNumberFromFileName.ContainNumber(result));
                    //filtered = filtered.Where(result => SelectConditions.All(cond => cond.IsSelect(result)));
                    Debug.WriteLine(String.Format("After AlgorithmOfGettingNumberFromFileName = {0}", filtered.Count()));

                    filtered = _resultList.Where(result => ConfigurableAction.BestSelectingByImagePropertyes.ExistBest(result));
                    Debug.WriteLine(String.Format("After BestSelectingByImagePropertyes.ExistBest = {0}", filtered.Count()));

                    filtered = filtered.Where(r => ConfigurableAction.DirectoryFilter.IsSelect(r));
                    Debug.WriteLine(String.Format("After DirectoryFilter = {0}", filtered.Count()));
                    foreach (var item in ConfigurableAction.SelectConditions)
                    {
                        filtered = filtered.Where(r => item.IsSelect(r));
                        Debug.WriteLine(String.Format("After {0} = {1}", item.Parametr, filtered.Count()));
                    }
                    foreach (var item in filtered)
                    {
                        item.ConfigurableAction = ConfigurableAction.GetAction(item);
                    }
                    FilteredResults = new ObservableCollection<DuplPairViewModel>(filtered);
                }, arg => _resultList != null));
            }
        }


      

        private ObservableCollection<DuplPairViewModel> _filteredResults;
        public ObservableCollection<DuplPairViewModel> FilteredResults
        {
            get { return _filteredResults; }
            set
            {
                _filteredResults = value;
                RaisePropertyChangedEvent("FilteredResults");
            }
        }

        public DuplPairViewModel SelectedPair { get; set; }

        ICommand _closeWindowAndSelectPairCommand;
        public ICommand CloseWindowAndSelectPairCommand
        {
            get
            {
                return _closeWindowAndSelectPairCommand ?? (_closeWindowAndSelectPairCommand = new RelayCommand(arg =>
                {
                    DuplPairViewModel duplPairViewModel = arg as DuplPairViewModel;
                    if (duplPairViewModel != null)
                    {
                        SelectedPair = duplPairViewModel;
                        base.OnClosingRequest(true);
                    }
                }, arg => _resultList != null));
            }
        }


        ICommand _openComparatorCommand;
        public ICommand OpenComparatorCommand
        {
            get
            {
                return _openComparatorCommand ?? (_openComparatorCommand = new RelayCommand(arg =>
                {
                    DuplPairViewModel duplPairViewModel = arg as DuplPairViewModel;
                    if (duplPairViewModel != null)
                    {
                        ComparatorViewModel vm = new ComparatorViewModel(duplPairViewModel, _resultList, null,
                            _undoRedoEngine, _windowService, Configuration);
                        _windowService.OpenComparatorWindow(vm);
                    }
                }, arg => _resultList != null));
            }
        }

        ICommand _goCommand;
        public ICommand GoCommand
        {
            get
            {
                return _goCommand ?? (_goCommand = new RelayCommand(arg =>
                {
                    foreach (var action in FilteredResults)
                    {
                        action.ConfigurableAction.Excute(_undoRedoEngine, _resultList, _resultCollectionView);
                    }
                    _resultList.RemoveAt(0);
                    
                }, arg => _resultList != null));
            }
        }
    }
}
